import { assert } from './utils/assertions';
export class Wallet {
    keplr;
    chainId;
    constructor(keplr) {
        this.keplr = keplr;
    }
    async enable() {
        if (!this.chainId)
            return;
        this.keplr.enable(this.chainId);
    }
    async getAddress() {
        if (!this.chainId)
            return '';
        const signer = window?.getOfflineSigner(this.chainId);
        const [{ address }] = await signer.getAccounts();
        return address;
    }
    async suggestToken(contractAddress) {
        assert(this.chainId, 'Chain id is not set');
        await this.keplr.suggestToken(this.chainId, contractAddress);
    }
    async getSnip20ViewingKey(contractAddress) {
        assert(this.chainId, 'Chain id is not set');
        return await this.keplr.getSecret20ViewingKey(this.chainId, contractAddress);
    }
    onKeplrChange(callback) {
        window.addEventListener('keplr_keystorechange', async () => {
            await callback();
        });
    }
}
let wallet = null;
export function useWallet() {
    return new Promise((resolve, reject) => {
        if (wallet) {
            resolve(wallet);
            // We needed to return immediately
            return;
        }
        const documentStateChange = (event) => {
            if (event.target &&
                event.target.readyState === 'complete') {
                if (!window.keplr) {
                    reject();
                    // Also here...
                    return;
                }
                if (wallet == null) {
                    wallet = new Wallet(window.keplr);
                }
                resolve(wallet);
                document.removeEventListener('readystatechange', documentStateChange);
            }
        };
        document.addEventListener('readystatechange', documentStateChange);
    });
}
